@page "/"
@inject Repository.FileIO file
@implements IDisposable

<div class="main-page @(currentTheme == "Dark" ? "dark" : "")">
    <div class="container">
        <div class="heading">
            <span>TODO</span>  
            <div class="img-theme" @onclick="changeTheme">
                
            </div>
        </div>
        <div class="input">
            <input placeholder="Create a new Todo..." type="text" @bind="newTodo" @onkeyup = "Enter"/>
            <div class="circle"></div>
            <i class="fas fa-plus" id="add" @onclick = "AddTodo"></i>
        </div>
        <div class="content" ondragover="event.preventDefault();">
            @foreach (var todoItem in currentList)
            {
                <DisplayTodo todoItem = "todoItem" 
                             OnItemDeleted = "@deleteItem"
                             OnItemSelected = "@checkItem" 
                             OnDragStart = "@HandleDragStart"
                             OnDragEnd = "@HandleDragEnd"
                             >
                </DisplayTodo>
            }
        </div>
        <div class="footer">
            <span id = "items-left">@todos.Count(p => !p.IsDone) items left</span>
            <div class="states">
                <span @onclick="GetAllTodos" class="@(currentTab == "All" ? "active" : "")" >All</span>
                <span @onclick ="GetActiveTodos" class="@(currentTab == "Active" ? "active" : "")">Active</span>
                <span @onclick ="GetCompletedTodos" class="@(currentTab == "Completed" ? "active" : "")">Completed</span>
            </div>
            <span id = "clear" @onclick="ClearCompleted">Clear Completed</span>
        </div>
        <div class="mobile-footer-states">
            <span @onclick="GetAllTodos" class="@(currentTab == "All" ? "active" : "")" >All</span>
            <span @onclick ="GetActiveTodos" class="@(currentTab == "Active" ? "active" : "")">Active</span>
            <span @onclick ="GetCompletedTodos" class="@(currentTab == "Completed" ? "active" : "")">Completed</span>
        </div>
    </div>
</div>

    
@code {
    private  List<TodoItem> todos;
    private List<TodoItem> currentList;
    private  string currentTab = "All";
    private  string currentTheme = "Light";
    private string newTodo;
    int currentIndex;

    protected override void OnInitialized()
    {
        todos = file.LoadListFromFile();
        currentList = todos;
    }
    void IDisposable.Dispose()
    {
         file.SaveListToFile(todos);
    }
    private void AddTodo()
    {
        if(!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem{ Title = newTodo });
            newTodo = string.Empty;
        }
    }
    private void Enter(KeyboardEventArgs eventArgs)
    {
        if(eventArgs.Code == "Enter" || eventArgs.Code == "NumpadEnter")
        {
            this.AddTodo();
        }
    }
    private void deleteItem(int Id)
    {
        todos.Remove(todos.Find(p => p.Id == Id));
    }

    private void checkItem(int Id)
    {
        todos.Find(p => p.Id == Id).IsDone = !todos.Find(p => p.Id == Id).IsDone;

    }

    private void GetActiveTodos()
    {
        currentList = todos.Where(item => item.IsDone == false).ToList();
        currentTab = "Active";
    }
    private void GetCompletedTodos()
    {
        currentList = todos.Where(item => item.IsDone == true).ToList();
        currentTab = "Completed";
    }
    private void GetAllTodos()
    {
        currentList = todos;
        currentTab = "All";
    }
    private void ClearCompleted()
    {
        todos.RemoveAll(item => item.IsDone == true);
    }
    private void changeTheme()
    {
        currentTheme = currentTheme == "Light" ? "Dark" : "Light";
    }

    void HandleDragStart(int Id)
    {
        currentIndex = todos.FindIndex(item => item.Id == Id);
    }
    void HandleDragEnd(int id)
    {
        var index = todos.FindIndex(item => item.Id == id);
        
        var current = todos[currentIndex];

        todos.RemoveAt(currentIndex);
        todos.Insert(index,current);
        StateHasChanged();
    }
}
